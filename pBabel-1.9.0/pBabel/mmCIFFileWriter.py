#-------------------------------------------------------------------------------
# . File      : mmCIFFileWriter.py
# . Program   : pDynamo-1.9.0                           (http://www.pdynamo.org)
# . Copyright : CEA, CNRS, Martin J. Field (2007-2014)
# . License   : CeCILL French Free Software License     (http://www.cecill.info)
#-------------------------------------------------------------------------------
"""Write data to a mmCIF file."""

import itertools, time

from pCore        import TextFileWriter
from ExportImport import _Exporter
from pMolecule    import PDYNAMO_VERSION, PeriodicTable, Sequence, System

#===================================================================================================================================
# . Parameters.
#===================================================================================================================================
# . Default data label.
_DEFAULTDATALABEL = "mmCIFSequence"

# . Headers.
_ATOMSITEHEADER              = "\n#################\n# . Atom Sites. #\n#################\n\n"
_ENTITYHEADER                = "\n###############\n# . Entities. #\n###############\n\n"
_ENTITYPOLYMERSEQUENCEHEADER = "\n###############################\n# . Entity Polymer Sequences. #\n###############################\n\n"

# . Undefined character.
_UNDEFINEDCHARACTER = "."

# . Unknown character.
_UNKNOWNCHARACTER = "?"

#===================================================================================================================================
# . Class.
#===================================================================================================================================
class mmCIFFileWriter ( TextFileWriter ):
    """mmCIFFileWriter is the class for writing mmCIF files."""

    # . Public methods.
    def WriteSystem ( self, system, datalabel = _DEFAULTDATALABEL ):
        """Write out a system."""

        # . Check |system|.
        if not isinstance ( system, System ): raise TypeError ( "Invalid |system| argument." )

        # . Get the sequence and other data.
        sequence = getattr ( system, "sequence", None )
        if sequence is None: sequence = Sequence.FromAtomContainer ( system.atoms, componentLabel = "UNK.1" )
        xyz = system.coordinates3

        # . Find which entities are linear polymers.
        polymerEntities = set ( )
        for polymer in sequence.linearPolymers:
            polymerEntities.add ( polymer.leftTerminalComponent.parent  )
            polymerEntities.add ( polymer.rightTerminalComponent.parent )

        # . Start writing.
        self.Open ( )

        # . Initial comment.
        self.file.write ( "# . mmCIF file generated by pMolecule {:s} on {:s}.\n".format ( PDYNAMO_VERSION, time.strftime ( "%d-%b-%y" ) ) )

        # . Data header.
        self.file.write ( "data_" + datalabel.strip ( ) + "\n" )

        # . Atoms.
        self.file.write ( _ATOMSITEHEADER )
        self.file.write ( "loop_\n" )
        self.file.write ( "_atom_site.id\n"                )
        self.file.write ( "_atom_site.type_symbol\n"       )
        self.file.write ( "_atom_site.label_atom_id\n"     )
        self.file.write ( "_atom_site.label_comp_id\n"     )
        self.file.write ( "_atom_site.label_seq_id\n"      )
        self.file.write ( "_atom_site.auth_seq_id\n"       )
        self.file.write ( "_atom_site.pdbx_PDB_ins_code\n" )
        self.file.write ( "_atom_site.cartn_x\n"           )
        self.file.write ( "_atom_site.cartn_y\n"           )
        self.file.write ( "_atom_site.cartn_z\n"           )
        self.file.write ( "_atom_site.label_asym_id\n"     )
        self.file.write ( "_atom_site.label_entity_id\n"   )
        sequenceAtoms = sequence.GatherAtoms ( )
        for atom in sequenceAtoms:
            index   = atom.index
            element = PeriodicTable.Symbol ( system.atoms[index].atomicNumber )
            # . Entity data.
            entity      = atom.parent.parent
            fields      = sequence.ParseLabel ( entity.label, fields = 1 )
            asymlabel   = fields[0]
            if len ( asymlabel ) <= 0: asymlabel     = _UNDEFINEDCHARACTER
            entitylabel = entity.label
            if len ( entitylabel ) <= 0: entitylabel = _UNDEFINEDCHARACTER
            # . Component data.
            fields = sequence.ParseLabel ( atom.parent.label, fields = 3 )
            name          = fields[0]
            esequence     = fields[1]
            insertioncode = fields[2]
            if len ( insertioncode ) <= 0: insertioncode = _UNDEFINEDCHARACTER
            if entity in polymerEntities: psequence = esequence
            else:                         psequence = _UNDEFINEDCHARACTER
            self.file.write ( "{:6d} {:<3s} {:<5s} {:<4s} {:<6s} {:<6s} {:<2s} {:10.5f} {:10.5f} {:10.5f}  {:<2s}  {:<s}\n".format ( index, element, atom.label, name, psequence, esequence, insertioncode, xyz[index,0], xyz[index,1], xyz[index,2], asymlabel, entitylabel ) )
        # . Entities.
        npolymer = 0
        self.file.write ( _ENTITYHEADER )
        self.file.write ( "loop_\n" )
        self.file.write ( "_entity.id\n"   )
        self.file.write ( "_entity.type\n" )
        for entity in sequence.children:
            label = entity.label
            if len ( label ) <= 0: label = _UNDEFINEDCHARACTER
            entityType = "Non-Polymer"
            if entity in polymerEntities:
                entityType = "Polymer"
                npolymer += 1
            self.file.write ( "{:<10s} {:s}\n".format ( label, entityType ) )
        # . Entities - polymer sequence.
        if npolymer > 0:
            self.file.write ( _ENTITYPOLYMERSEQUENCEHEADER )
            self.file.write ( "loop_\n" )
            self.file.write ( "_entity_poly_seq.entity_id\n" )
            self.file.write ( "_entity_poly_seq.mon_id\n"    )
            self.file.write ( "_entity_poly_seq.num\n"       )
            for entity in sequence.children:
                if entity in polymerEntities:
                    label = entity.label
                    if len ( label ) <= 0: label = _UNDEFINEDCHARACTER
                    oldname     = None
                    oldsequence = None
                    for component in entity.children:
                        fields      = sequence.ParseLabel ( component.label, fields = 2 )
                        name        = fields[0]
                        newSequence = fields[1]
                        if ( name != oldname ) and ( newSequence != oldsequence ):
                            self.file.write ( "{:<10s} {:<4s} {:<6s}\n".format ( label, name, newSequence ) )
                            oldname     = name
                            oldsequence = newSequence
        # . Finish up.
        self.Close ( )

#===================================================================================================================================
# . Functions.
#===================================================================================================================================
def mmCIFFile_FromSystem ( filename, system, datalabel = _DEFAULTDATALABEL ):
    """Helper function that writes a system to a mmCIF file."""
    outfile = mmCIFFileWriter ( filename )
    outfile.WriteSystem ( system, datalabel = datalabel )

# . Exporter definitions.
_Exporter.AddHandler ( { System : mmCIFFile_FromSystem } , [ "mmcif", "MMCIF" ], "Macromolecular Crystallographic Information File" )

#===================================================================================================================================
# . Test.
#===================================================================================================================================
if __name__ == "__main__":
    pass
